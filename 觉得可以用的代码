cat /dev/null > messages  #清空一个文件
exit # 这个命令是一种正确并且合适的退出脚本的方法.
再次提醒你#!/bin/sh将会调用默认的shell解释器, 在Linux机器上默认是/bin/bash.写这个可以容易的移植到non-linux机器上
小心: 使用sh scriptname来调用脚本的时候将会关闭一些Bash特定的扩展, 脚本可能因此而调用失败.
echo $(( 2#101011 ))  #数制转换

逗号操作符. 逗号操作符链接了一系列的算术操作. 虽然里边所有的内容都被运行了,但只有最后一项被返回.
    1 let "t2 = ((a = 9, 15 / 3))"  # Set "a = 9" and "t2 = 15 / 3"
空命令[冒号, 即:]. 等价于"NOP" (no op, 一个什么也不干的命令). 也可以被认为与shell的内建命令true作用相同. ":"命令是一个bash的内建命令, 它的退出码(exit status)是"true"(0).

4. : ${username=`whoami`}
  2 # ${username=`whoami`}   如果没有开头的":"的话, 将会给出一个错误, 
  3 #                        除非"username"是一个命令或者内建命令...

$
行结束符. 在正则表达式中, "$"表示行结束符.

${}
参数替换.

$*, $@
位置参数.

$?
退出状态码变量. $? 变量 保存了一个命令, 一个函数, 或者是脚本本身的退出状态码.

$$
进程ID变量. 这个$$ 变量 保存了它所在脚本的进程 ID [1]

初始化数组.

  1 Array=(element1 element2 element3)

大括号扩展 {xxx,yyy,zzz,...}
    cat {file1,file2,file3} > combined_file
    cp file22.{txt,backup}
    echo {file1,file2}\ :{\ A," B",' C'}  #在大括号中, 不允许有空白, 除非这个空白被引用或转义.  file1 : A file1 : B file1 : C file2 : A file2 : B file2 : C

a=123
( a=321; )	      
echo "a = $a"   # a = 123   # 在圆括号中a变量, 更像是一个局部变量. 
小括号和大括号的区别。同时， {大括号}中的代码块将不会开启一个新的子shell.
a=123
{ a=321; }
echo "a = $a"   # a = 321   (说明在代码块中对变量a所作的修改, 影响了外边的变量)

{} \; 一般都在find命令中使用. 这不是一个shell内建命令. ";"用来结束find命令序列的-exec选项. 它需要被保护以防止被shell所解释.

command &>filename 重定向command的stdout和stderr到filename中.
command >&2 重定向command的stdout到stderr中.

[root@localhost tmp]# grep '\<the\>' 1.txt  #匹配行首的the  正则表达式中的单词边界 
the asdfthe
[root@localhost tmp]# grep the 1.txt  #匹配这行的所有the
the asdfthe

(cd /source/directory && tar cf - . ) | (cd /dest/directory && tar xpvf -) #从一个目录移动整个目录树到另一个目录。mv不就好了，这里只是告诉我们这种用法

怎么在文件的开头添加几行？
file=data.txt
title="***This is the title line of data text file***"

echo $title | cat - $file >$file.new
# "cat -" 将stdout连接到$file.
#  最后的结果就是生成了一新文件, 
#+ 并且成功的将$title的内容附加到了文件的*开头*. 

注意$variable事实上只是${variable}的简写形式. 在某些上下文中$variable可能会引起错误, 这时候你就需要用${variable}了
# 强烈注意, 在赋值的的时候, 等号前后一定不要有空格.

hello="A B  C   D"
echo $hello   # A B C D
echo "$hello" # A B  C   D
# 就象你看到的echo $hello   和    echo "$hello"   将给出不同的结果.
# ===============================================================
# 引用一个变量将保留其中的空白, 当然, 如果是变量替换就不会保留了.  “”是弱引用，''是强引用

``和R=$(cat /etc/redhat-release) 都是命令替换的一种形式
a=2334
b=${a/23/BB}             # 将"23"替换成"BB".

位置参数
从命令行传递到脚本的参数: $0, $1, $2, $3 . . .

$0就是脚本文件自身的名字, $1 是第一个参数, $2是第二个参数, $3是第三个参数, 然后是第四个. [1] $9之后的位置参数就必须用大括号括起来了, 比如, ${10}, ${11}, ${12}.

两个比较特殊的变量$*和$@ 表示所有的位置参数.
echo "All the command-line parameters are: "$*""  表示对应的位置参数
if [ $# -lt "$MINPARAMS" ]   表示数量

‘{}‘}标记法提供了一种提取从命令行传递到脚本的最后一个位置参数的简单办法. 但是这种方法同时还需要使用间接引用.
args=$#           # 位置参数的个数.
lastarg=${!args}
# 或:       lastarg=${!#}
#           (感谢, Chris Monson.)
# 注意, 不能直接使用 lastarg=${!$#} , 这会产生错误.

#!/bin/bash
# 使用'shift'来逐步存取所有的位置参数. 参数一个个传进去，然后处理完后再处理下一个

#  给脚本命个名, 比如shft,
#+ 然后给脚本传递一些位置参数, 比如: 
#          ./shft a b c def 23 skidoo

until [ -z "$1" ]  # 直到所有的位置参数都被存取完...
do
  echo -n "$1 "
  shift
done

echo               # 额外的换行.

exit 0

escape=$'\033'                    # 033 是八进制码的esc.想要查什么特殊代码，查ascii表
# 如果使用$'\X'结构,那-e选项就不必要了.
echo; echo "NEWLINE AND BEEP"
echo $'\n'           # 新行.
echo $'\a'           # 警告(蜂鸣).

例子：自动登录mysql（root:root,passwd:123456),查询test库，test1表里的user=aa的记录。

复制代码代码如下:

#!/bin/sh
mysql -uroot -p123456 <<EOF
use test;
select * from testaa while a=10000; ###1000 not usr single quote mark,because a is int
# type,only char type need single quote mark.
exit
EOF

root@LAPTOP-7RN4GA8H:~# cat >> 1.txt << EOF
> AAA
> BBB
> EOF

if cmp a b &> /dev/null; then
  echo "Files a and b are identical."
else
  echo "Files a and b differ."
fi 

# 非常有用的"if-grep"结构:
# ------------------------
if grep -q Bash file
then echo "File contains at least one occurrence of Bash."
fi

#  小技巧:
#  如果你不能够确定一个特定的条件该如何进行判断,
#+ 那么就使用if-test结构. 

echo

echo "Testing \"0\""
if [ 0 ]      # zero
then
  echo "0 is true."
else
  echo "0 is false."
fi            # 0 为真.

/usr/bin/test, [ ], 和/usr/bin/[都是等价命令
[[ ]]结构比[ ]结构更加通用. 这是一个扩展的test命令, 是从ksh88中引进的.
在[[和]]之间所有的字符都不会发生文件名扩展或者单词分割, 但是会发生参数扩展和命令替换.
使用[[ ... ]]条件判断结构, 而不是[ ... ], 能够防止脚本中的许多逻辑错误. 比如, &&, ||, <, 和> 操作符能够正常存在于[[ ]]条件判断结构中, 但是如果出现在[ ]结构中的话, 会报错.

在if后面也不一定非得是test命令或者是用于条件判断的中括号结构( [ ] 或 [[ ]] ).

  1 dir=/home/bozo
  2 
  3 if cd "$dir" 2>/dev/null; then   # "2>/dev/null" 会隐藏错误信息.
  4   echo "Now in $dir."
  5 else
  6   echo "Can't change to $dir."
  7 fi
"if COMMAND"结构将会返回COMMAND的退出状态码.

与此相似, 在中括号中的条件判断也不一定非得要if不可, 也可以使用列表结构.

  1 var1=20
  2 var2=22
  3 [ "$var1" -ne "$var2" ] && echo "$var1 is not equal to $var2"
  4 
  5 home=/home/bozo
  6 [ -d "$home" ] || echo "$home directory does not exist."

  (( ))结构扩展并计算一个算术表达式的值. 如果表达式的结果为0, 那么返回的退出状态码为1, 或者是"假". 而一个非零值的表达式所返回的退出状态码将为0, 或者是"true". 这种情况和先前所讨论的test命令和[ ]结构的行为正好相反.

    (( 5 > 4 ))                                      # 真
    echo "Exit status of \"(( 5 > 4 ))\" is $?."     # 0

7.2. 文件测试操作符
如果下面的条件成立将会返回真.

-e
文件存在

-a
文件存在

这个选项的效果与-e相同. 但是它已经被"弃用"了, 并且不鼓励使用.

-f
表示这个文件是一个一般文件(并不是目录或者设备文件)

-s
文件大小不为零

-d
表示这是一个目录

-b
表示这是一个块设备(软盘, 光驱, 等等.)

-c
表示这是一个字符设备(键盘, modem, 声卡, 等等.)

-p
这个文件是一个管道

-h
这是一个符号链接

-L
这是一个符号链接

-S
表示这是一个socket

-t
文件(描述符)被关联到一个终端设备上

这个测试选项一般被用来检测脚本中的stdin([ -t 0 ]) 或者stdout([ -t 1 ])是否来自于一个终端.

-r
文件是否具有可读权限(指的是正在运行这个测试命令的用户是否具有读权限)

-w
文件是否具有可写权限(指的是正在运行这个测试命令的用户是否具有写权限)

-x
文件是否具有可执行权限(指的是正在运行这个测试命令的用户是否具有可执行权限)

-g
set-group-id(sgid)标记被设置到文件或目录上

如果目录具有sgid标记的话, 那么在这个目录下所创建的文件将属于拥有这个目录的用户组, 而不必是创建这个文件的用户组. 这个特性对于在一个工作组中共享目录非常有用.

-u
set-user-id (suid)标记被设置到文件上

如果一个root用户所拥有的二进制可执行文件设置了set-user-id标记位的话, 那么普通用户也会以root权限来运行这个文件. [1] 这对于需要访问系统硬件的执行程序(比如pppd和cdrecord)非常有用. 如果没有suid标志的话, 这些二进制执行程序是不能够被非root用户调用的.

	      -rwsr-xr-t    1 root       178236 Oct  2  2000 /usr/sbin/pppd
	      
对于设置了suid标志的文件, 在它的权限列中将会以s表示.
-k
设置粘贴位

对于"粘贴位"的一般了解, save-text-mode标志是一个文件权限的特殊类型. 如果文件设置了这个标志, 那么这个文件将会被保存到缓存中, 这样可以提高访问速度. [2] 粘贴位如果设置在目录中, 那么它将限制写权限. 对于设置了粘贴位的文件或目录, 在它们的权限标记列中将会显示t.

	      drwxrwxrwt    7 root         1024 May 19 21:26 tmp/
	      
如果用户并不拥有这个设置了粘贴位的目录, 但是他在这个目录下具有写权限, 那么这个用户只能在这个目录下删除自己所拥有的文件. 这将有效的防止用户在一个公共目录中不慎覆盖或者删除别人的文件. 比如说/tmp目录. (当然, 目录的所有者或者root用户可以随意删除或重命名其中的文件.)
-O
判断你是否是文件的拥有者

-G
文件的group-id是否与你的相同

-N
从文件上一次被读取到现在为止, 文件是否被修改过

f1 -nt f2
文件f1比文件f2新

f1 -ot f2
文件f1比文件f2旧

f1 -ef f2
文件f1和文件f2是相同文件的硬链接

!
"非" -- 反转上边所有测试的结果(如果没给出条件, 那么返回真).

例子 7-4. 测试那些断掉的链接文件

  1 #!/bin/bash
  2 # broken-link.sh
  3 # 由Lee bigelow所编写 <ligelowbee@yahoo.com>
  4 # 已经争得作者的授权引用在本书中.
  5 
  6 #一个纯粹的shell脚本用来找出那些断掉的符号链接文件并且输出它们所指向的文件.
  7 #以便于它们可以把输出提供给xargs来进行处理 :)
  8 #比如. broken-link.sh /somedir /someotherdir|xargs rm
  9 #
 10 #下边的方法, 不管怎么说, 都是一种更好的办法:
 11 #
 12 #find "somedir" -type l -print0|\
 13 #xargs -r0 file|\
 14 #grep "broken symbolic"|
 15 #sed -e 's/^\|: *broken symbolic.*$/"/g'
 16 #
 17 #但这不是一个纯粹的bash脚本, 最起码现在不是.
 18 #注意: 谨防在/proc文件系统和任何死循环链接中使用!
 19 ##############################################################
 20 
 21 
 22 #如果没有参数被传递到脚本中, 那么就使用
 23 #当前目录. 否则就是用传递进来的参数作为目录
 24 #来搜索.
 25 ####################
 26 [ $# -eq 0 ] && directorys=`pwd` || directorys=$@
 27 
 28 #编写函数linkchk用来检查传递进来的目录或文件是否是链接, 
 29 #并判断这些文件或目录是否存在. 然后打印它们所指向的文件.
 30 #如果传递进来的元素包含子目录, 
 31 #那么把子目录也放到linkcheck函数中处理, 这样就达到了递归的目的.
 32 ##########
 33 linkchk () {
 34     for element in $1/*; do
 35     [ -h "$element" -a ! -e "$element" ] && echo \"$element\"
 36     [ -d "$element" ] && linkchk $element
 37     # 当然, '-h'用来测试符号链接, '-d'用来测试目录.
 38     done
 39 }
 40 
 41 #把每个传递到脚本的参数都送到linkchk函数中进行处理, 
 42 #检查是否有可用目录. 如果没有, 那么就打印错误消息和
 43 #使用信息.
 44 ################
 45 for directory in $directorys; do
 46     if [ -d $directory ]
 47 	then linkchk $directory
 48 	else 
 49 	    echo "$directory is not a directory"
 50 	    echo "Usage: $0 dir1 dir2 ..."
 51     fi
 52 done
 53 
 54 exit 0
例子 28-1, 例子 10-7, 例子 10-3, 例子 28-3, 和例子 A-1也会演示文件测试操作的使用过程.

注意事项
[1]	
在将suid标记设置到二进制可执行文件的时候, 一定要小心. 因为这可能会引发安全漏洞. 但是suid标记不会影响shell脚本.

[2]	
在当代UNIX系统中, 文件中已经不使用粘贴位了, 粘贴位只使用在目录中.

linkchk () {
  for element in $1/*; do
      [ -h "$element" -a ! -e "$element" ] && echo \"$element\"
      [ -d "$element" ] && linkchk $element
     # 当然, '-h'用来测试符号链接, '-d'用来测试目录.
  done
}             #递归的写法

算术操作符经常会出现在 expr或let表达式中.
  let "n = $n + 1"   # let "n = n + 1"  也可以.
  : $((n = $n + 1))
   #  ":" 是必需的, 因为如果没有":"的话, 
   #+ Bash将会尝试把"$((n = $n + 1))"解释为一个命令.
   (( n = n + 1 ))
   #  上边这句是一种更简单方法.
   let "n++" 
   (( n++ ))   # (( ++n )  也可以.
   	
Bash不能够处理浮点运算. 它会把包含小数点的数字看作字符串. let "b = $a + 1.3"  # 错误. 如果非要做浮点运算的话, 可以在脚本中使用bc, 这个命令可以进行浮点运算, 或者调用数学库函数.
[root@lancy bin]# echo "scale=2; 5/3" |bc
1.66
[root@lancy bin]# echo "ibase=10;obase=2; 4*6"|bc
11000

&&
与(逻辑)

  1 if [ $condition1 ] && [ $condition2 ]
  2 # 与 if [ $condition1 -a $condition2 ] 相同
  3 # 如果condition1和condition2都为true, 那结果就为true. 
  4 
  5 if [[ $condition1 && $condition2 ]]    # 也可以.
  6 # 注意: &&不允许出现在[ ... ]结构中.

逗号操作符可以连接两个或多个算术运算. 所有的操作都会被运行(可能会有负作用), 但是只会返回最后操作的结果.

  1 let "t1 = ((5 + 3, 7 - 1, 15 - 4))"
  2 echo "t1 = $t1"               # t1 = 11
  3 
  4 let "t2 = ((a = 9, 15 / 3))"  # 设置"a"并且计算"t2".
  5 echo "t2 = $t2    a = $a"     # t2 = 5    a = 9

  shell脚本在默认情况下都是把数字作为10进制数来处理, 除非这个数字采用了特殊的标记或者前缀. 如果数字以0开头的话那么就是8进制数. 如果数字以0x开头的话那么就是16进制数. 如果数字中间嵌入了#的话, 
  那么就被认为是BASE#NUMBER形式的标记法(有范围和符号限制).

  # 8进制: 以'0'(零)开头 
  let "oct = 032"
  echo "octal number = $oct"               # 26
  # 表达式结果是用10进制表示的.

  let "hex = 0x32"
  echo "hexadecimal number = $hex"         # 50
  # 表达式结果是用10进制表示的.
  
  # 其他进制: BASE#NUMBER
  # BASE的范围在2到64之间.
  # NUMBER的值必须使用BASE范围内的符号来表示, 具体看下边的示例. 
  
  let "bin = 2#111100111001101"
  echo "binary number = $bin"              # 31181
 
  let "b32 = 32#77"
 30 echo "base-32 number = $b32"             # 231

 let "b64 = 64#@_"
 echo "base-64 number = $b64"             # 4031
 # 这个表示法只能工作于受限的ASCII字符范围(2 - 64).
 # 10个数字 + 26个小写字母 + 26个大写字符 + @ + _
 检查$BASH_VERSION对于判断系统上到底运行的是哪个shell来说是一种非常好的方法. 变量$SHELL有时候不能够给出正确的答案.
 $IFS
内部域分隔符

这个变量用来决定Bash在解释字符串时如何识别域, 或者单词边界.

$IFS默认为空白(空格, 制表符,和换行符), 但这是可以修改的, 比如, 在分析逗号分隔的数据文件时, 
就可以设置为逗号. 注意$*使用的是保存在$IFS中的第一个字符. 
  bash -c 'set w x y z; IFS=":-;"; echo "$*"'

(shopt -s dotglob; rm -f *) #可以删除显示和隐藏的文件

$TMOUT
如果$TMOUT环境变量被设置为非零值time的话, 那么经过time秒后, shell提示符将会超时. 这将会导致登出(logout).

在2.05b版本的Bash中, $TMOUT变量与命令read可以在脚本中结合使用.

  1 # 只能够在Bash脚本中使用, 必须使用2.05b或之后版本的Bash.
  2 
  3 TMOUT=3    # 提示输入时间为3秒.
  4 
  5 echo "What is your favorite song?"
  6 echo "Quickly now, you only have $TMOUT seconds to answer!"
  7 read song
  8 
  9 if [ -z "$song" ]
 10 then
 11   song="(no answer)"
 12   # 默认响应.
 13 fi
 14 
 15 echo "Your favorite song is $song."

 $*
所有的位置参数都被看作为一个单词.

Note	
"$*"必须被引用起来.

$@
与$*相同, 但是每个参数都是一个独立的引用字符串, 这就意味着, 参数是被完整传递的, 并没有被解释或扩展. 这也意味着, 参数列表中每个参数都被看作为单独的单词.

Note	
当然, "$@"应该被引用起来.

$@与$*中的参数只有在被双引号引用起来的时候才会不同.

$-
传递给脚本的标记(使用set命令). 参见例子 11-15.
$_
这个变量保存之前执行的命令的最后一个参数的值.
$!
运行在后台的最后一个作业的PID(进程ID)
  1 LOG=$0.log
  2 
  3 COMMAND1="sleep 100"
  4 
  5 echo "Logging PIDs background commands for script: $0" >> "$LOG"
  6 # 所以它们是可以被监控的, 并且可以在必要的时候kill掉它们.
  7 echo >> "$LOG"
  8 
  9 # 记录命令.
 10 
 11 echo -n "PID of \"$COMMAND1\":  " >> "$LOG"
 12 ${COMMAND1} &
 13 echo $! >> "$LOG"
 14 # "sleep 100"的PID:  1506
 15 
 16 # 感谢, Jacques Lederer, 对此的建议.

$?
命令, 函数, 或者是脚本本身的(参见例子 23-7)退出状态码

$$
脚本自身的进程ID. $$变量在脚本中经常用来构造"唯一的"临时文件名，这么做通常比调用mktemp命令来的简单.

字符串长度

${#string}
expr length $string
expr "$string" : '.*'
  1 stringZ=abcABC123ABCabc
  2 
  3 echo ${#stringZ}                 # 15
  4 echo `expr length $stringZ`      # 15
  5 echo `expr "$stringZ" : '.*'`    # 15

匹配字符串开头的子串长度

expr match "$string" '$substring'
$substring是一个正则表达式.

expr "$string" : '$substring'
$substring是一个正则表达式.

  1 stringZ=abcABC123ABCabc
  2 #       |------|
  3 
  4 echo `expr match "$stringZ" 'abc[A-Z]*.2'`   # 8
  5 echo `expr "$stringZ" : 'abc[A-Z]*.2'`       # 8

索引

expr index $string $substring
在字符串$string中所匹配到的$substring第一次所出现的位置.

  1 stringZ=abcABC123ABCabc
  2 echo `expr index "$stringZ" C12`             # 6
  3                                              # C 字符的位置.
  4 
  5 echo `expr index "$stringZ" 1c`              # 3
  6 # 'c' (in #3 position) matches before '1'.
这与C语言中的strchr()函数非常相似.

提取子串

${string:position}
在$string中从位置$position开始提取子串.

如果$string是"*"或者"@", 那么将会提取从位置$position开始的位置参数. [1]

${string:position:length}
在$string中从位置$position开始提取$length长度的子串.

  1 stringZ=abcABC123ABCabc
  2 #       0123456789.....
  3 #       0-based indexing.
  4 
  5 echo ${stringZ:0}                            # abcABC123ABCabc
  6 echo ${stringZ:1}                            # bcABC123ABCabc
  7 echo ${stringZ:7}                            # 23ABCabc
  8 
  9 echo ${stringZ:7:3}                          # 23A
 10                                              # 提取子串长度为3.
 11 
 12 
 13 
 14 # 能不能从字符串的右边(也就是结尾)部分开始提取子串? 
 15     
 16 echo ${stringZ:-4}                           # abcABC123ABCabc
 17 # 默认是提取整个字符串, 就象${parameter:-default}一样.
 18 # 然而 . . .
 19 
 20 echo ${stringZ:(-4)}                         # Cabc 
 21 echo ${stringZ: -4}                          # Cabc
 22 # 这样, 它就可以工作了.
 23 # 使用圆括号或者添加一个空格可以"转义"这个位置参数.
 24 
 25 # 感谢, Dan Jacobson, 指出这点.
如果$string参数是"*"或"@", 那么将会从$position位置开始提取$length个位置参数, 但是由于可能没有$length个位置参数了, 那么就有几个位置参数就提取几个位置参数.

  1 echo ${*:2}          # 打印出第2个和后边所有的位置参数.
  2 echo ${@:2}          # 同上.
  3 
  4 echo ${*:2:3}        # 从第2个开始, 连续打印3个位置参数. 

expr substr $string $position $length
在$string中从$position开始提取$length长度的子串.

  1 stringZ=abcABC123ABCabc
  2 #       123456789......
  3 #       以1开始计算.
  4 
  5 echo `expr substr $stringZ 1 2`              # ab
  6 echo `expr substr $stringZ 4 3`              # ABC

expr match "$string" '\($substring\)'
从$string的开始位置提取$substring, $substring是正则表达式.

expr "$string" : '\($substring\)'
从$string的开始位置提取$substring, $substring是正则表达式.

  1 stringZ=abcABC123ABCabc
  2 #       =======	    
  3 
  4 echo `expr match "$stringZ" '\(.[b-c]*[A-Z]..[0-9]\)'`   # abcABC1
  5 echo `expr "$stringZ" : '\(.[b-c]*[A-Z]..[0-9]\)'`       # abcABC1
  6 echo `expr "$stringZ" : '\(.......\)'`                   # abcABC1
  7 # 上边的每个echo都打印出相同的结果. 

expr match "$string" '.*\($substring\)'
从$string的结尾提取$substring, $substring是正则表达式.

expr "$string" : '.*\($substring\)'
从$string的结尾提取$substring, $substring是正则表达式.

  1 stringZ=abcABC123ABCabc
  2 #                ======
  3 
  4 echo `expr match "$stringZ" '.*\([A-C][A-C][A-C][a-c]*\)'`    # ABCabc
  5 echo `expr "$stringZ" : '.*\(......\)'`                       # ABCabc

子串削除

${string#substring}
从$string的开头位置截掉最短匹配的$substring.

${string##substring}
从$string的开头位置截掉最长匹配的$substring.

  1 stringZ=abcABC123ABCabc
  2 #       |----|
  3 #       |----------|
  4 
  5 echo ${stringZ#a*C}      # 123ABCabc
  6 # 截掉'a'到'C'之间最短的匹配字符串.
  7 
  8 echo ${stringZ##a*C}     # abc
  9 # 截掉'a'到'C'之间最长的匹配字符串.

${string%substring}
从$string的结尾位置截掉最短匹配的$substring.

${string%%substring}
从$string的结尾位置截掉最长匹配的$substring.

  1 stringZ=abcABC123ABCabc
  2 #                    ||
  3 #        |------------|
  4 
  5 echo ${stringZ%b*c}      # abcABC123ABCa
  6 # 从$stringZ的结尾位置截掉'b'到'c'之间最短的匹配.
  7 
  8 echo ${stringZ%%b*c}     # a
  9 # 从$stringZ的结尾位置截掉'b'到'c'之间最长的匹配. 
当你需要构造文件名的时候, 这个操作就显得特别有用.

子串替换

${string/substring/replacement}
使用$replacement来替换第一个匹配的$substring.

${string//substring/replacement}
使用$replacement来替换所有匹配的$substring.

  1 stringZ=abcABC123ABCabc
  2 
  3 echo ${stringZ/abc/xyz}           # xyzABC123ABCabc
  4                                   # 使用'xyz'来替换第一个匹配的'abc'.
  5 
  6 echo ${stringZ//abc/xyz}          # xyzABC123ABCxyz
  7                                   # 用'xyz'来替换所有匹配的'abc'.

${string/#substring/replacement}
如果$substring匹配$string的开头部分, 那么就用$replacement来替换$substring.

${string/%substring/replacement}
如果$substring匹配$string的结尾部分, 那么就用$replacement来替换$substring.

  1 stringZ=abcABC123ABCabc
  2 
  3 echo ${stringZ/#abc/XYZ}          # XYZABC123ABCabc
  4                                   # 用'XYZ'替换开头的'abc'.
  5 
  6 echo ${stringZ/%abc/XYZ}          # abcABC123ABCXYZ
  7                                   # 用'XYZ'替换结尾的'abc'.

例子 9-14. 提取字符串的另一种方法

  1 #!/bin/bash
  2 # substring-extraction.sh
  3 
  4 String=23skidoo1
  5 #      012345678    Bash
  6 #      123456789    awk
  7 # 注意不同的字符串索引系统:
  8 # Bash的第一个字符是从'0'开始记录的. 
  9 # Awk的第一个字符是从'1'开始记录的. 
 10 
 11 echo ${String:2:4} # 位置 3 (0-1-2), 4 个字符长
 12                                          # skid
 13 
 14 # awk中等价于${string:pos:length}的命令是substr(string,pos,length).
 15 echo | awk '
 16 { print substr("'"${String}"'",3,4)      # skid
 17 }
 18 '
 19 #  使用一个空的"echo"通过管道传递给awk一个假的输入, 
 20 #+ 这样就不必提供一个文件名给awk.
 21 
 22 exit 0

${parameter-default}, ${parameter:-default}
${parameter-default} -- 如果变量parameter没被声明, 那么就使用默认值.

${parameter:-default} -- 如果变量parameter没被设置, 那么就使用默认值.
${parameter-default} 和${parameter:-default}在绝大多数的情况下都是相同的. 只有在parameter已经被声明, 但是被赋null值得时候, 这个额外的:才会产生不同的结果.

${parameter=default}, ${parameter:=default}

${parameter=default} -- 如果变量parameter没声明, 那么就把它的值设为default.

${parameter:=default} -- 如果变量parameter没设置, 那么就把它的值设为default.

这两种形式基本上是一样的. 只有在变量$parameter被声明并且被设置为null值的时候, :才会引起这两种形式的不同. 

${parameter+alt_value}, ${parameter:+alt_value}
${parameter+alt_value} -- 如果变量parameter被声明了, 那么就使用alt_value, 否则就使用null字符串.

${parameter:+alt_value} -- 如果变量parameter被设置了, 那么就使用alt_value, 否则就使用null字符串.

这两种形式绝大多数情况下都一样. 只有在parameter被声明并且设置为null值的时候, 多出来的这个:才会引起这两种形式的不同

${parameter?err_msg}, ${parameter:?err_msg}
${parameter?err_msg} -- 如果parameter已经被声明, 那么就使用设置的值, 否则打印err_msg错误消息.

${parameter:?err_msg} -- 如果parameter已经被设置, 那么就使用设置的值, 否则打印err_msg错误消息.

这两种形式绝大多数情况都是一样的. 和上边所讲的情况一样, 只有在parameter被声明并设置为null值的时候, 多出来的:才会引起这两种形式的不同.

例子 9-15. 使用参数替换和错误消息

  1 #!/bin/bash
  2 
  3 #  检查一些系统环境变量.
  4 #  这是一种可以做一些预防性保护措施的好习惯.
  5 #  比如, 如果$USER(用户在控制台上中的名字)没有被设置的话,
  6 #+ 那么系统就会不认你.
  7 
  8 : ${HOSTNAME?} ${USER?} ${HOME?} ${MAIL?}
  9   echo
 10   echo "Name of the machine is $HOSTNAME."
 11   echo "You are $USER."
 12   echo "Your home directory is $HOME."
 13   echo "Your mail INBOX is located in $MAIL."
 14   echo
 15   echo "If you are reading this message,"
 16   echo "critical environmental variables have been set."
 17   echo
 18   echo
 19 
 20 # ------------------------------------------------------
 21 
 22 #  ${variablename?}结构
 23 #+ 也能够检查脚本中变量的设置情况.
 24 
 25 ThisVariable=Value-of-ThisVariable
 26 #  注意, 顺便提一下, 
 27 #+ 这个字符串变量可能会被设置一些非法字符.
 28 : ${ThisVariable?}
 29 echo "Value of ThisVariable is $ThisVariable".
 30 echo
 31 echo
 32 
 33 
 34 : ${ZZXy23AB?"ZZXy23AB has not been set."}
 35 #  如果变量ZZXy23AB没有被设置的话, 
 36 #+ 那么这个脚本会打印一个错误信息, 然后结束.
 37 
 38 # 你可以自己指定错误消息.
 39 # : ${variablename?"ERROR MESSAGE"}
 40 
 41 
 42 # 等价于:    dummy_variable=${ZZXy23AB?}
 43 #            dummy_variable=${ZZXy23AB?"ZXy23AB has not been set."}
 44 #
 45 #            echo ${ZZXy23AB?} >/dev/null
 46 
 47 #  使用命令"set -u"来比较这些检查变量是否被设置的方法.
 48 #
 49 
 50 
 51 
 52 echo "You will not see this message, because script already terminated."
 53 
 54 HERE=0
 55 exit $HERE   # 不会在这里退出.
 56 
 57 # 事实上, 这个脚本将会以返回值1作为退出状态(echo $?).

 : ${1?"Usage: $0 ARGUMENT"}
 #  如果没有提供命令行参数的话, 那么脚本就在这里退出了


 变量长度/子串删除

${#var}
字符串长度(变量$var得字符个数). 对于array来说, ${#array}表示的是数组中第一个元素的长度.

Note	
例外情况:

${#*}和${#@}表示位置参数的个数.

对于数组来说, ${#array[*]}和${#array[@]}表示数组中元素的个数.

${var#Pattern}, ${var##Pattern}
从变量$var的开头删除最短或最长匹配$Pattern的子串. (译者注: 这是一个很常见的用法, 请读者牢记, 一个"#"表示匹配最短, "##"表示匹配最长.)

1 # 摘自例子"days-between.sh"的一个函数.
  2 # 去掉传递进来参数开头的0.
  3 
  4 strip_leading_zero () #  去掉从参数中传递进来的,
  5 {                     #+ 可能存在的开头的0(也可能有多个0).
  6   return=${1#0}       #  "1"表示的是"$1" -- 传递进来的参数.
  7 }                     #  "0"就是我们想从"$1"中删除的子串 -- 去掉零.

  1 strip_leading_zero2 () # 去掉开头可能存在的0(也可能有多个0), 因为如果不取掉的话,
  2 {                      # Bash就会把这个值当作8进制的值来解释. 
  3   shopt -s extglob     # 打开扩展的通配(globbing).
  4   local val=${1##+(0)} # 使用局部变量, 匹配最长连续的一个或多个0.
  5   shopt -u extglob     # 关闭扩展的通配(globbing).
  6   _strip_leading_zero2=${val:-0}
  7                        # 如果输入为0, 那么返回0来代替"".
  8 }

  ${var%Pattern}, ${var%%Pattern}
从变量$var的结尾删除最短或最长匹配$Pattern的子串. (译者注: 这是一个很常见的用法, 请读者牢记, 一个"%"表示匹配最短, "%%"表示匹配最长.)

变量扩展/子串替换

这些结构都是从ksh中引入的.

${var:pos}
变量var从位置pos开始扩展(译者注: 也就是pos之前的字符都丢弃).

${var:pos:len}
变量var从位置pos开始, 并扩展len个字符. 参考例子 A-14, 这个例子展示了这种操作的一个创造性的用法.

${var/Pattern/Replacement}
使用Replacement来替换变量var中第一个匹配Pattern的字符串.

如果省略Replacement, 那么第一个匹配Pattern的字符串将被替换为空, 也就是被删除了.

${var//Pattern/Replacement}
全局替换. 所有在变量var匹配Pattern的字符串, 都会被替换为Replacement.

和上边一样, 如果省略Replacement, 那么所有匹配Pattern的字符串, 都将被替换为空, 也就是被删除掉.

例子 9-20. 使用模式匹配来解析任意字符串

  1 #!/bin/bash
  2 
  3 var1=abcd-1234-defg
  4 echo "var1 = $var1"
  5 
  6 t=${var1#*-*}
  7 echo "var1 (with everything, up to and including first - stripped out) = $t"
  8 #  t=${var1#*-}  也一样,
  9 #+ 因为#匹配最短的字符串,
 10 #+ 同时*匹配任意前缀, 包括空字符串. 
 11 # (感谢, Stephane Chazelas, 指出这点.)
 12 
 13 t=${var1##*-*}
 14 echo "If var1 contains a \"-\", returns empty string...   var1 = $t"
 15 
 16 
 17 t=${var1%*-*}
 18 echo "var1 (with everything from the last - on stripped out) = $t"
 19 
 20 echo
 21 
 22 # -------------------------------------------
 23 path_name=/home/bozo/ideas/thoughts.for.today
 24 # -------------------------------------------
 25 echo "path_name = $path_name"
 26 t=${path_name##/*/}
 27 echo "path_name, stripped of prefixes = $t"
 28 # 在这个特例中, 与	t=`basename $path_name`		效果相同. 
 29 #  t=${path_name%/}; t=${t##*/}   是更一般的解决方法.
 30 #+ 但有时还是会失败.
 31 #  如果$path_name以一个换行符结尾的话, 那么	`basename $path_name` 就不能正常工作了,
 32 #+ 但是上边的表达式可以.
 33 # (感谢, S.C.)
 34 
 35 t=${path_name%/*.*}
 36 # 与	t=`dirname $path_name`	效果相同.
 37 echo "path_name, stripped of suffixes = $t"
 38 # 在某些情况下将失效, 比如 "../", "/foo////", # "foo/", "/".
 39 #  删除后缀, 尤其是在basename没有后缀的情况下,
 40 #+ 但是dirname可以, 不过这同时也使问题复杂化了.
 41 # (感谢, S.C.)
 42 
 43 echo
 44 
 45 t=${path_name:11}
 46 echo "$path_name, with first 11 chars stripped off = $t"
 47 t=${path_name:11:5}
 48 echo "$path_name, with first 11 chars stripped off, length 5 = $t"
 49 
 50 echo
 51 
 52 t=${path_name/bozo/clown}
 53 echo "$path_name with \"bozo\" replaced  by \"clown\" = $t"
 54 t=${path_name/today/}
 55 echo "$path_name with \"today\" deleted = $t"
 56 t=${path_name//o/O}
 57 echo "$path_name with all o's capitalized = $t"
 58 t=${path_name//o/}
 59 echo "$path_name with all o's deleted = $t"
 60 
 61 exit 0

 ${var/#Pattern/Replacement}
如果变量var的前缀匹配Pattern, 那么就使用Replacement来替换匹配到Pattern的字符串.

${var/%Pattern/Replacement}
如果变量var的后缀匹配Pattern, 那么就使用Replacement来替换匹配到Pattern的字符串.

例子 9-21. 对字符串的前缀和后缀使用匹配模式

  1 #!/bin/bash
  2 # var-match.sh:
  3 # 对字符串的前缀和后缀进行模式替换的一个演示.
  4 
  5 v0=abc1234zip1234abc    # 变量原始值.
  6 echo "v0 = $v0"         # abc1234zip1234abc
  7 echo
  8 
  9 # 匹配字符串的前缀(开头).
 10 v1=${v0/#abc/ABCDEF}    # abc1234zip1234abc
 11                         # |-|
 12 echo "v1 = $v1"         # ABCDEF1234zip1234abc
 13                         # |----|
 14 
 15 # 匹配字符串的后缀(结尾).
 16 v2=${v0/%abc/ABCDEF}    # abc1234zip123abc
 17                         #              |-|
 18 echo "v2 = $v2"         # abc1234zip1234ABCDEF
 19                         #               |----|
 20 
 21 echo
 22 
 23 #  ----------------------------------------------------
 24 #  必须匹配字符串的开头或结尾,
 25 #+ 否则是不会产生替换结果的.
 26 #  ----------------------------------------------------
 27 v3=${v0/#123/000}       # 匹配, 但不是在开头.
 28 echo "v3 = $v3"         # abc1234zip1234abc
 29                         # 不会发生替换.
 30 v4=${v0/%123/000}       # 匹配, 但不是在结尾.
 31 echo "v4 = $v4"         # abc1234zip1234abc
 32                         # 不会发生替换. 
 33 
 34 exit 0			
${!varprefix*}, ${!varprefix@}
匹配所有之前声明过的, 并且以varprefix开头的变量.

  1 xyz23=whatever
  2 xyz24=
  3 
  4 a=${!xyz*}      # 展开所有以"xyz"开头的, 并且之前声明过的变量名.
  5 echo "a = $a"   # a = xyz23 xyz24
  6 a=${!xyz@}      # 同上.
  7 echo "a = $a"   # a = xyz23 xyz24
  8 
  9 # Bash, 版本2.04, 添加了这个功能.
注意事项
[1]	
如果在一个非交互脚本中, $parameter被设置为null的话, 那么这个脚本将会返回127作为退出状态码(127返回码对应的Bash错误码为命令未发现"command not found").

declare或者typeset内建命令(这两个命令是完全一样的)允许指定变量的具体类型
declare/typeset选项

-r 只读
-i 整型
如果把一个变量指定为整型的话, 那么即使没有expr或者let命令, 也允许使用特定的算术运算.

  4 declare -i n
  5 n=6/3
  6 echo "n = $n"       # n = 2

-a 数组
-f 函数
如果在脚本中使用declare -f, 而不加任何参数的话, 那么将会列出这个脚本之前定义的所有函数.

  1 declare -f function_name
如果在脚本中使用declare -f function_name这种形式的话, 将只会列出这个函数的名字.测试是会打印整个函数。

-x export
  1 declare -x var3
这句将会声明一个变量, 并作为这个脚本的环境变量被导出.

-x var=$value
  1 declare -x var3=373
declare命令允许在声明变量类型的同时给变量赋值.

使用declare内建命令可以限制变量的作用域.

  1 foo ()
  2 {
  3 FOO="bar"
  4 }
  5 
  6 bar ()
  7 {
  8 foo
  9 echo $FOO
 10 }
 11 
 12 bar   # 打印bar. 
然而 . . .

  1 foo (){
  2 declare FOO="bar"
  3 }
  4 
  5 bar ()
  6 {
  7 foo
  8 echo $FOO
  9 }
 10 
 11 bar  # 什么都不打印.
 12 
 13 
 14 # 感谢, Michael Iatrou, 指出这点. 


 变量的间接引用到底有什么应用价值? 它给Bash添加了一种类似于C语言指针的功能, 比如, 在表格查找中的用法. 另外, 
 还有一些其他非常有趣的应用. . . .

 $RANDOM: 产生随机整数
$RANDOM是Bash的内部函数 (并不是常量), 这个函数将返回一个伪随机 [1] 整数, 范围在0 - 32767之间. 
它不应该被用来产生密匙.

在一个指定范围内产生随机数.

  1 #  在6 到 30之间产生随机数.
  2    rnumber=$((RANDOM%25+6))	
  3 
  4 #  还是在6 - 30之间产生随机数,
  5 #+ 但是这个数还必须能够被3整除.
  6    rnumber=$(((RANDOM%30/3+1)*3))
  7 
  8 #  注意, 并不是在所有情况下都能正确运行.
  9 #  如果$RANDOM返回0, 那么就会失败.
 10 
 11 #  Frank Wang 建议用下边的方法:
 12    rnumber=$(( RANDOM%27/3*3+6 ))

rnumber=$(((RANDOM%(max-min+divisibleBy))/divisibleBy*divisibleBy+min))
这里Bill展示了一个通用公式, 这个函数返回两个指定值之间的随机数.

dev/urandom设备文件提供了一种比单独使用$RANDOM更好的, 能够产生更加"随机"的随机数的方法. 
dd if=/dev/urandom of=targetfile bs=1 count=XX能够产生一个很分散的伪随机数序列. 然而, 如果想要将这个数赋值到
一个脚本文件的变量中, 还需要可操作性, 比如使用od命令 (就像上边的例子, 还有例子 12-13), 或者使用dd命令 
(参见例子 12-55), 或者通过管道传递到md5sum命令中 (参见例子 33-14).
当然还有其他的产生伪随机数的方法. awk就能提供一个方便的方法来做到这点.

 37 (( t = a<45?7:11 ))   # C语言风格的三元操作.
 38 echo "If a < 45, then t = 7, else t = 11."
 39 echo "t = $t "        # Yes!

 例子 10-2. 每个[list]元素中都带有两个参数的for循环

  1 #!/bin/bash
  2 # 还是行星.
  3 
  4 # 用行星距太阳的距离来分配行星的名字.
  5 
  6 for planet in "Mercury 36" "Venus 67" "Earth 93"  "Mars 142" "Jupiter 483"
  7 do
  8   set -- $planet  # 解析变量"planet"并且设置位置参数. 
  9   # "--" 将防止$planet为空, 或者是以一个破折号开头. 
 10 
 11   # 可能需要保存原始的位置参数, 因为它们被覆盖了.
 12   # 一种方法就是使用数组.
 13   #        original_params=("$@")
 14 
 15   echo "$1		$2,000,000 miles from the sun"
 16   #-------two  tabs---把后边的0和2连接起来
 17 done
 18 
 19 # (感谢, S.C., 对此问题进行的澄清.)
 20 
 21 exit 0

 例子 10-3. 文件信息: 对包含在变量中的文件列表进行操作

  1 #!/bin/bash
  2 # fileinfo.sh
  3 
  4 FILES="/usr/sbin/accept
  5 /usr/sbin/pwck
  6 /usr/sbin/chroot
  7 /usr/bin/fakefile
  8 /sbin/badblocks
  9 /sbin/ypbind"     # 这是你所关心的文件列表.
 10                   # 扔进去一个假文件, /usr/bin/fakefile.
 11 
 12 echo
 13 
 14 for file in $FILES
 15 do
 16 
 17   if [ ! -e "$file" ]       # 检查文件是否存在.
 18   then
 19     echo "$file does not exist."; echo
 20     continue                # 继续下一个.
 21    fi
 22 
 23   ls -l $file | awk '{ print $9 "         file size: " $5 }'  # 打印两个域.
 24   whatis `basename $file`   # 文件信息.
 25   # 注意whatis数据库需要提前建立好.
 26   # 要想达到这个目的, 以root身份运行/usr/bin/makewhatis.
 27   echo
 28 done  
 29 
 30 exit 0

 在一个for循环中忽略in [list]部分的话, 将会使循环操作$@ -- 从命令行传递给脚本的位置参数. 一个非常好的例子, 参见例子 A-16. 参见例子 11-16.

例子 10-5. 在for循环中省略in [list]部分

  1 #!/bin/bash
  2 
  3 #  使用两种方式来调用这个脚本, 一种带参数, 另一种不带参数,
  4 #+ 并观察在这两种情况下, 此脚本的行为.
  5 
  6 for a
  7 do
  8  echo -n "$a "
  9 done
 10 
 11 #  省略'in list'部分, 因此循环将会操作'$@'
 12 #+ (包括空白的命令行参数列表).
 13 
 14 echo
 15 
 16 exit 0
也可以使用命令替换 来产生for循环的[list]. 

例子 10-6. 使用命令替换来产生for循环的[list]

  1 #!/bin/bash
  2 #  for-loopcmd.sh: 带[list]的for循环, 
  3 #+ [list]是由命令替换所产生的.
  4 
  5 NUMBERS="9 7 3 8 37.53"
  6 
  7 for number in `echo $NUMBERS`  # for number in 9 7 3 8 37.53
  8 do
  9   echo -n "$number "
 10 done
 11 
 12 echo 
 13 exit 0

 29 # 让我们使用C语言的"逗号操作符", 来同时增加两个变量的值. 
 30 
 31 for ((a=1, b=1; a <= LIMIT ; a++, b++))  # 逗号将同时进行两条操作.
 32 do
 33   echo -n "$a-$b "
 34 done
 35 
 36 echo; echo

例子 10-17. C风格的while循环

  1 #!/bin/bash
  2 # wh-loopc.sh: 循环10次的"while"循环.
  3 
  4 LIMIT=10
  5 a=1
  6 
  7 while [ "$a" -le $LIMIT ]
  8 do
  9   echo -n "$a "
 10   let "a+=1"
 11 done           # 到目前为止都没有什么令人惊奇的地方.
 12 
 13 echo; echo
 14 
 15 # +=================================================================+
 16 
 17 # 现在, 重复C风格的语法.
 18 
 19 ((a = 1))      # a=1
 20 # 双圆括号允许赋值两边的空格, 就像C语言一样.
 21 
 22 while (( a <= LIMIT ))   # 双圆括号, 变量前边没有"$".
 23 do
 24   echo -n "$a "
 25   ((a += 1))   # let "a+=1"
 26   # Yes, 看到了吧.
 27   # 双圆括号允许像C风格的语法一样增加变量的值.
 28 done
 29 
 30 echo
 31 
 32 # 现在, C程序员可以在Bash中找到回家的感觉了吧.
 33 
 34 exit 0
